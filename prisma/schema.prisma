generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PLAN {
  FREE
  PRO
  ULTIMATE
}

enum PLAN_STATUS {
  ACTIVE
  EXPIRED
}

enum CONVERSATION_RESULT {
  PASSED
  FAILED
}

enum PROSPECT_STATUS {
  INITIAL
  FOLLOWUP
  BOOKED
}

enum LANGUAGE {
  HINDI
  ENGLISH
}

enum VOICE {
  ERIC
}

enum THEME {
  DARK
  LIGHT
  SYSTEM
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname  String
  email     String   @unique
  clerkId   String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propspects   Prospect[]
  products     Product[]
  subscription Subscription?
  setting      Setting?
}

model Prospect {
  id        String          @id @default(uuid())
  name      String
  email     String
  phone     String
  notes     String?
  stage     PROSPECT_STATUS @default(INITIAL)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String          @db.Uuid
  user      User            @relation(fields: [userId], references: [id])

  appointments  Appointment[]
  conversations Conversation[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
}

model Appointment {
  id         String   @id @default(uuid())
  prospectId String
  prospect   Prospect @relation(fields: [prospectId], references: [id])
  date       DateTime
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Conversation {
  id         String              @id @default(uuid())
  prospectId String
  prospect   Prospect            @relation(fields: [prospectId], references: [id])
  transcript String
  audioUrl   String
  result     CONVERSATION_RESULT
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model Subscription {
  id        String      @id @default(uuid())
  userId    String      @unique @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  plan      PLAN
  status    PLAN_STATUS
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Setting {
  id             String          @id @default(uuid()) @db.Uuid
  userId         String          @unique @db.Uuid
  user           User            @relation(fields: [userId], references: [id])
  theme          THEME
  updatedAt      DateTime        @updatedAt
  agentSetting   AgentSetting?
  scriptSetting  ScriptSetting?
  advanceSetting AdvanceSetting?
}

model AgentSetting {
  id            String   @id @default(uuid())
  settingId     String   @unique @db.Uuid
  setting       Setting  @relation(fields: [settingId], references: [id])
  language      LANGUAGE @default(HINDI)
  firstMessage  String
  knowledgeBase String
  voice         VOICE    @default(ERIC)
  updatedAt     DateTime @updatedAt
}

model ScriptSetting {
  id            String   @id @default(uuid())
  settingId     String   @unique @db.Uuid
  setting       Setting  @relation(fields: [settingId], references: [id])
  prospecting   String
  qualification String
  appointment   String
  updatedAt     DateTime @updatedAt
}

model AdvanceSetting {
  id                    String   @id @default(uuid())
  settingId             String   @unique @db.Uuid
  setting               Setting  @relation(fields: [settingId], references: [id])
  maxConnectionDuration Int
  keywords              String[]
  startAt               DateTime
  endAt                 DateTime
  updatedAt             DateTime @updatedAt
}
