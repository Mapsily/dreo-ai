generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  firstName    String
  lastName     String
  email        String        @unique
  clerkId      String        @unique
  phoneNumber  String?
  companyName  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  prospects    Prospect[]
  Tickets      Ticket[]
  Transactions Transaction[]
  setting      Setting?
  subscription Subscription?
}

model Prospect {
  id               String           @id @default(uuid())
  name             String
  phone            String
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           String           @db.Uuid
  lastContacted    DateTime?
  rescheduledCount Int?             @default(0)
  rescheduledFor   DateTime?
  status           PROSPECT_STATUS? @default(INITIAL)
  conversations    Conversation[]
  user             User             @relation(fields: [userId], references: [id])
}

// model Product {
//   id          String   @id @default(uuid())
//   name        String
//   description String
//   price       Float
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   userId      String   @db.Uuid
//   user        User     @relation(fields: [userId], references: [id])
// }

// model Appointment {
//   id               String         @id @default(uuid())
//   scheduledFor     DateTime
//   productsInterest String[]
//   interestLevel    INTEREST_LEVEL @default(LOW)
//   notes            String?
//   createdAt        DateTime       @default(now())
//   updatedAt        DateTime       @updatedAt
//   prospectId       String
//   prospect         Prospect       @relation(fields: [prospectId], references: [id])
// }

model Conversation {
  id             String              @id @default(uuid())
  ultravoxCallId String              @unique
  startAt        DateTime
  endAt          DateTime
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  notes          String
  result         CONVERSATION_RESULT
  status         CONVERSATION_STATUS @default(INPROGRESS)
  prospectId     String
  prospect       Prospect            @relation(fields: [prospectId], references: [id])
}

model Transaction {
  id        String             @id @default(uuid())
  userId    String             @db.Uuid
  user      User               @relation(fields: [userId], references: [id])
  status    TRANSACTION_STATUS @default(INITIATED)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Subscription {
  id           String   @id @default(uuid())
  userId       String   @unique @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  plan         Plan     @relation(fields: [planId], references: [id])
  planId       String
  minutesLeft  Int      @default(0)
  expiresAt    DateTime
  dailyUsed    Int      @default(0)
  lastUsedDate DateTime @default(now())
}

model Plan {
  id           String         @id @default(uuid())
  name         String         @unique
  price        Float
  minutes      Int
  duration     Int // in days
  perDay       Int
  isPopular    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  subscription Subscription[]
}

model Setting {
  id              String           @id @default(uuid()) @db.Uuid
  theme           THEME            @default(LIGHT)
  updatedAt       DateTime         @updatedAt
  advancedSetting AdvancedSetting?
  agentSetting    AgentSetting?
  scriptSetting   ScriptSetting?
  userId          String           @unique @db.Uuid
  user            User             @relation(fields: [userId], references: [id])
}

model AgentSetting {
  id            String   @id @default(uuid())
  settingId     String   @unique @db.Uuid
  language      String
  firstMessage  String
  knowledgeBase String
  voice         String
  updatedAt     DateTime @updatedAt
  setting       Setting  @relation(fields: [settingId], references: [id])
}

model ScriptSetting {
  id        String   @id @default(uuid())
  settingId String   @unique @db.Uuid
  initial   String
  followUp  String
  updatedAt DateTime @updatedAt
  setting   Setting  @relation(fields: [settingId], references: [id])
}

model AdvancedSetting {
  id                      String   @id @default(uuid())
  settingId               String   @unique @db.Uuid
  questions               String[]
  maxConversationDuration String   @default("300s")
  timeZone                String
  startAt                 Int      @default(9)
  endAt                   Int      @default(18)
  updatedAt               DateTime @updatedAt
  setting                 Setting  @relation(fields: [settingId], references: [id])
}

// support ticket
model Ticket {
  id          String         @id @default(uuid()) @db.Uuid
  status      TICKET_STATUS  @default(OPEN)
  title       String
  description String
  category    ISSUE_CATEGORY @default(FEATURE)
  createdAt   DateTime       @default(now())
  userId      String         @db.Uuid
  user        User           @relation(fields: [userId], references: [id])
  responses   Response[]
}

// support ticket response by team
model Response {
  id          String @id @default(uuid()) @db.Uuid
  title       String
  description String
  ticketId    String @db.Uuid
  ticket      Ticket @relation(fields: [ticketId], references: [id])
}

enum TRANSACTION_STATUS {
  INITIATED
  FAILED
  SUCCESS
}

enum ISSUE_CATEGORY {
  TECHNICAL
  FEATURE
  PAYMENT
}

enum TICKET_STATUS {
  OPEN
  INPROGRESS
  CLOSED
}

enum PLAN_STATUS {
  ACTIVE
  EXPIRED
  CANCELED
}

enum CONVERSATION_RESULT {
  PASSED
  FAILED
  RESCHEDULED
  NOTRESPONDED
}

enum CONVERSATION_STATUS {
  INPROGRESS
  COMPLETED
}

enum PROSPECT_STATUS {
  INITIAL
  RESCHEDULED
  PASSED
  NOTINTERESTED
  NOTRESPONDED
  FAILED
  SCHEDULED
}

enum INTEREST_LEVEL {
  LOW
  MEDIUM
  HIGH
}

enum THEME {
  LIGHT
  DARK
}
